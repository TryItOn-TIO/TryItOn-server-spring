name: TIO Spring CI/CD

on:
  push:
    branches: [ "main" , "develop"]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
      - name: Run Tests
        env:
          OAUTH_ID: ${{ secrets.OAUTH_ID }}
          OAUTH_PASSWORD: ${{ secrets.OAUTH_PASSWORD }}
          MAIL_ID: ${{ secrets.MAIL_ID }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          JWT: ${{ secrets.JWT }}
          TOSS_KEY: ${{ secrets.TOSS_KEY }}
        run: ./gradlew test -Dspring.profiles.active=ci
  
  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
      - name: Build with Gradle
        env:
          OAUTH_ID: ${{ secrets.OAUTH_ID }}
          OAUTH_PASSWORD: ${{ secrets.OAUTH_PASSWORD }}
          MAIL_ID: ${{ secrets.MAIL_ID }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          JWT: ${{ secrets.JWT }}
          TOSS_KEY: ${{ secrets.TOSS_KEY }}
        run: ./gradlew bootJar -Dspring.profiles.active=ci
      - name: Check for JAR file
        run: |
          echo "--- Checking the contents of build/libs directory ---"
          ls -l build/libs
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: spring-app-jar
          path: build/libs/*.jar

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: spring-app-jar
      - name: Check downloaded artifact contents
        run: ls -lR
      - name: Zip deployment package
        run: |
          mkdir -p deploy
          cp $(find . -name "*.jar" ! -name "*-plain.jar") deploy/application.jar
          cp appspec.yml deploy/appspec.yml
          cp -r scripts deploy/scripts
          cd deploy && zip -r deploy.zip .
      - name: Upload to S3
        run: aws s3 cp deploy/deploy.zip s3://${{ secrets.AWS_S3_BUCKET_NAME }}/spring-app/deploy.zip
      - name: Deploy to AWS CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name TIO-Shop-Application \
            --deployment-group-name TIO-Spring-CodeDeploy-Group \
            --s3-location bucket=${{ secrets.AWS_S3_BUCKET_NAME }},bundleType=zip,key=spring-app/deploy.zip