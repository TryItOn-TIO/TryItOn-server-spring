name: TIO Spring CI/CD

on:
  # 아래 브랜치에 push될 때 자동으로 실행
  push:
    branches: [ "main" , "develop"]
  # github actions 탭에서 수동 실행 가능하도록 버튼 추가
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    # --- [추가] MySQL 서비스 컨테이너 설정 ---
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    # --- 여기까지 추가 ---

    steps:
      # 1. 소스 코드 다운로드
      - name: Checkout
        uses: actions/checkout@v3

      # 2. JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      # 3. Gradle 캐싱 (빌드 속도 향상)
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. Gradle 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # AWS 자격 증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 5. Spring Boot 애플리케이션 빌드
      - name: Build and Test with Gradle
        # 이 단계에서만 사용할 환경 변수를 GitHub Secrets에서 가져와 설정합니다.
        env:
          OAUTH_ID: ${{ secrets.OAUTH_ID }}
          OAUTH_PASSWORD: ${{ secrets.OAUTH_PASSWORD }}
          MAIL_ID: ${{ secrets.MAIL_ID }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          JWT: ${{ secrets.JWT }}
          TOSS_KEY: ${{ secrets.TOSS_KEY }}
        run: ./gradlew build -Dspring.profiles.active=ci

      # --- [추가] 디버깅용 단계 ---
      - name: Check for JAR file
        run: |
          echo "--- Checking the contents of build/libs directory ---"
          ls -l build/libs
      # --- 여기까지 추가 ---

      # 6. 배포 패키지 압축
      - name: Zip deployment package
        run: |
          mkdir -p deploy
          cp $(find build/libs -name "*.jar" ! -name "*-plain.jar") deploy/application.jar
          cp appspec.yml deploy/appspec.yml
          cp -r scripts deploy/scripts
          cd deploy && zip -r deploy.zip .

      # 8. S3에 업로드
      - name: Upload to S3
        run: aws s3 cp deploy/deploy.zip s3://${{ secrets.AWS_S3_BUCKET_NAME }}/spring-app/deploy.zip

      # 9. AWS CodeDeploy 배포 실행
      - name: Deploy to AWS CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name TIO-Shop-Application \
            --deployment-group-name TIO-Spring-CodeDeploy-Group \
            --s3-location bucket=${{ secrets.AWS_S3_BUCKET_NAME }},bundleType=zip,key=spring-app/deploy.zip